import random
import time
import logging

from terms import *
import communicate


def make_number_term(x):
    if x in [0, 1]:
        return x
    if x % 2 == 0:
        return (SHL1, make_number_term(x//2))
    else:
        return (PLUS, (SHL1, make_number_term(x//2)), 1)


if __name__ == '__main__':
    #logging.basicConfig(level=logging.DEBUG)

    random.seed(42)

    hz = 0x1001010081010011 #  not too many ones, or program would be too large
    hz_term = make_number_term(hz)

    xs = [0, 1, 2**4, 2**16, 2**32, 2**63, 2**64-1]
    xs += [random.randrange(2**64) for _ in range(10)]

    interesting_terms = []
    interesting_terms.append(hz)
    for op in UNARY_OPS:
        interesting_terms.append((op, 'x'))
    for op in BINARY_OPS:
        interesting_terms.append((op, 'x', hz))
        interesting_terms.append((op, hz, 'x'))

    fold_op = (LAMBDA, ('y', 'z'), (XOR, (SHL1, 'y'), 'z'))
    interesting_terms.append((FOLD, 'x', hz, fold_op))

    fout = open('generated_terms_test.py', 'w')

    print>>fout, '# generated by generate_terms_test.py'
    print>>fout
    print>>fout, 'from nose.tools import eq_'
    print>>fout, 'from terms import *'
    for i, t in enumerate(interesting_terms):
        print i, 'of', len(interesting_terms)
        print t

        time.sleep(6)
        program = (LAMBDA, ('x',), t)

        print>>fout
        print>>fout
        print>>fout, 'def test{:02}():'.format(i)
        print>>fout, '    #', term_to_str(program)

        program = subst(program, {hz: hz_term})

        oracle = communicate.eval_program(term_to_str(program), xs)
        for x in xs:
            print>>fout
            print>>fout, '    # on {}'.format(x)
            print>>fout, '    eq_('
            print>>fout, '        apply(''{!r}, {{}}, {}),'.format(program, x)
            print>>fout, '        {})'.format(oracle[x])

        fout.flush()

    fout.close()
    print 'done'